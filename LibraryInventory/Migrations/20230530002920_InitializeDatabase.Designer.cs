// <auto-generated />
using LibraryInventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryInventory.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230530002920_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryInventory.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("nombre");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("apellidos");

                    b.HasKey("Id");

                    b.ToTable("autores");
                });

            modelBuilder.Entity("LibraryInventory.Models.Author_Book", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("autores_id");

                    b.Property<int>("BookISBN")
                        .HasColumnType("int")
                        .HasColumnName("libros_ISBN");

                    b.HasKey("AuthorId", "BookISBN");

                    b.HasIndex("BookISBN");

                    b.ToTable("autores_has_libros");
                });

            modelBuilder.Entity("LibraryInventory.Models.Book", b =>
                {
                    b.Property<int>("ISBN")
                        .HasColumnType("int")
                        .HasColumnName("ISBN");

                    b.Property<string>("NumberOfPages")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("n_paginas");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("editoriales_id");

                    b.Property<string>("Synopsis")
                        .HasColumnType("ntext")
                        .HasColumnName("sinopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("titulo");

                    b.HasKey("ISBN");

                    b.HasIndex("PublisherId");

                    b.ToTable("libros");
                });

            modelBuilder.Entity("LibraryInventory.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("nombre");

                    b.Property<string>("Office")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("sede");

                    b.HasKey("Id");

                    b.ToTable("editoriales");
                });

            modelBuilder.Entity("LibraryInventory.Models.Author_Book", b =>
                {
                    b.HasOne("LibraryInventory.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryInventory.Models.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryInventory.Models.Book", b =>
                {
                    b.HasOne("LibraryInventory.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryInventory.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryInventory.Models.Book", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("LibraryInventory.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
